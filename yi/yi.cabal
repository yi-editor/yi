name:           yi
version:        0.6.3.0
category:       Development, Editor
synopsis:       The Haskell-Scriptable Editor
description:
  Yi is a text editor written in Haskell and extensible in Haskell. The goal of the Yi project is
  to provide a flexible, powerful, and correct editor for haskell hacking.
license:        GPL
license-file:   LICENSE
author:         AUTHORS
maintainer:     yi-devel@googlegroups.com
homepage:       http://haskell.org/haskellwiki/Yi
bug-reports:    http://code.google.com/p/yi-editor/issues/list
Cabal-Version:  >= 1.10
tested-with:    GHC==7.0.2
build-type:     Simple

data-files:
  art/*.png
  art/*.pdf
  example-configs/*.hs

extra-source-files: src/library/Yi/Lexer/common.hsinc

-- Frontends
flag cocoa
  Default: False
  Description: "Build with Cocoa frontend"

flag pango
  Default: False
  Description: "Build with Pango frontend"

flag vte
  Default: False
  Description: "Build with Vte frontend"

flag vty
  Default: True
  Description: "Build with Vty frontend"

flag scion
  Default: False
  Description: Use the scion library to provide extra commands that interface with GHC (experimental)

flag ghcAPI
  Description: Enable linking with GHC API for advanced features.
  Default: False
  -- Can be useful to disable; ghc package is difficult to rebuild;
  --  * normally not available for profiling.
  --  * links against old/new version of bytestring
  --  * links against old version of Cabal
  -- ...

flag hacking
  Default: False
  Description:
     Hacking mode:
        * Create HackerMain.hs by copying your ~/.yi/yi.hs
        * Skip library compilation
        * You can run yi in-place with dist/build/yi/yi

flag testing
  Description: bake-in the self-checks

flag dochack
  Default: False
  Description:
      Hack to get Haddock documentation, by disabling executables.
         * this is a workaround for a cabal bug; see Issue #347
         * do a 'cabal install yi -fdochack' followed by 'cabal install yi' to get yi and the documentation

library
  hs-source-dirs: src/library
  default-language: Haskell2010

  if flag(hacking)
    buildable: False

  exposed-modules:
    Yi
    Yi.Boot
    Yi.Buffer
    Yi.Buffer.Basic
    Yi.Buffer.HighLevel
    Yi.Buffer.Indent
    Yi.Buffer.Normal
    Yi.Buffer.Misc
    Yi.Buffer.Region
    Yi.Buffer.Undo
    Yi.Command
    Yi.Completion
    Yi.Config
    Yi.Config.Default
    Yi.Config.Misc
    Yi.Config.Simple
    Yi.Config.Simple.Types
    Yi.Core
    Yi.Debug
    Yi.Dired
    Yi.Dynamic
    Yi.Editor
    Yi.Eval
    Yi.Event
    Yi.File
    Yi.History
    Yi.Hoogle
    Yi.Hooks
    Yi.IReader
    Yi.IncrementalParse
    Yi.Interact
    Yi.Keymap
    Yi.Keymap.Completion
    Yi.Keymap.Cua
    Yi.Keymap.Emacs
    Yi.Keymap.Emacs.KillRing
    Yi.Keymap.Emacs.Utils
    Yi.Keymap.Keys
    Yi.Keymap.Vim
    Yi.KillRing
    Yi.Layout
    Yi.Lexer.Abella
    Yi.Lexer.Alex
    Yi.Lexer.Cabal
    Yi.Lexer.Compilation
    Yi.Lexer.C
    Yi.Lexer.ObjectiveC
    Yi.Lexer.Cplusplus
    Yi.Lexer.Haskell
    Yi.Lexer.JavaScript
    Yi.Lexer.Java
    Yi.Lexer.Latex
    Yi.Lexer.LiterateHaskell
    Yi.Lexer.GitCommit
    Yi.Lexer.GNUMake
    Yi.Lexer.OCaml
    Yi.Lexer.Ott
    Yi.Lexer.Perl
    Yi.Lexer.Python
    Yi.Lexer.Srmc
    Yi.Lexer.SVNCommit
    Yi.Lexer.Whitespace
    Yi.Main
    Yi.MiniBuffer
    Yi.Misc
    Yi.Mode.Abella
    Yi.Mode.Buffers
    Yi.Mode.Compilation
    Yi.Mode.Haskell
    Yi.Mode.Haskell.Dollarify
    Yi.Mode.IReader
    Yi.Mode.Interactive
    Yi.Mode.JavaScript
    Yi.Mode.Latex
    Yi.Modes
    Yi.Monad
    Yi.Prelude
    Yi.Process
    Yi.Rectangle
    Yi.Regex
    Yi.Region
    Yi.Snippets
    Yi.Snippets.Haskell
    Yi.Search
    Yi.String
    Yi.Style
    Yi.Style.Library
    Yi.Syntax
    Yi.Syntax.Driver
    Yi.Syntax.Haskell
    Yi.Syntax.JavaScript
    Yi.Syntax.Latex
    Yi.Syntax.Layout
    Yi.Syntax.OnlineTree
    Yi.Syntax.Paren
    Yi.Syntax.Tree
    Yi.Syntax.Strokes.Haskell
    Yi.Tab
    Yi.Tag
    Yi.TextCompletion,
    Yi.UI.Common
    Yi.UI.Batch
    Yi.UI.Utils
    Yi.UI.TabBar
    Yi.Verifier.JavaScript
    Yi.Window
    Yi.Char.Unicode

    -- This is super bad. This shouldn't be exposed (and we should just
    -- depend on a premade ropes library). Needed in yi-pango.
    Data.Rope
    Data.Prototype
    Parser.Incremental

  build-depends:
    Cabal >= 1.10 && < 1.11,
    Diff >=0.1 && <0.2,
    array, containers,  directory, process, old-locale,
    base >=4 && <5,
    binary == 0.5.*,
    bytestring >=0.9.1 && <0.9.2,
    cautious-file == 1.0.*,
    concrete-typerep == 0.1.*,
    derive >=2.4 && <2.5,
    data-accessor >= 0.2.1.4 && < 0.3,
    data-accessor-monads-fd == 0.2.*,
    data-accessor-template >= 0.2.1.3 && < 0.2.2,
    dlist >=0.4.1,
    dyre >=0.7,
    filepath>=1.1 && <1.3,
    fingertree >= 0 && <0.1,
    ghc-paths ==0.1.*,
    hashable < 1.2,
    hint > 0.3.1,
    monads-fd >= 0.1.0.1,
    pointedlist >= 0.3.5 && <0.4,
    pureMD5 >= 0.2.3,
    random,
    regex-base ==0.93.*,
    regex-tdfa == 1.1.*,
    rosezipper >= 0.1 && < 0.2,
    split == 0.1.*,
    template-haskell >= 2.4 && < 2.6,
    time >= 1.1 && < 1.3,
    utf8-string >= 0.3.1,
    uniplate,
    unix-compat >=0.1 && <0.3,
    unordered-containers >= 0.1.3 && < 0.2

  build-tools: alex
  ghc-options: -Wall -fno-warn-orphans
  if flag(hacking)
    ghc-prof-options: -prof -auto-all

  if !os(windows)
    build-depends:
      unix

  include-dirs:   src/library/Yi/Lexer

  if flag(testing)
    cpp-options: -DTESTING
    hs-source-dirs: src/tests
    other-modules: Driver, TestSuite
    build-depends:
      QuickCheck >= 2.1.0.2,
      random

  -- Frontends
  if flag(cocoa)
    exposed-modules:
      Yi.UI.Cocoa
    other-modules:
      Yi.UI.Cocoa.Application
      Yi.UI.Cocoa.TextStorage
      Yi.UI.Cocoa.TextView
      Yi.UI.Cocoa.Utils
    build-depends:
      HOC,
      HOC-AppKit,
      HOC-Foundation
    cpp-options: -DFRONTEND_COCOA

  if flag(pango)
    exposed-modules:
      Yi.UI.Pango
      Yi.UI.Pango.Control
    other-modules:
      Yi.UI.Pango.Layouts
      Yi.UI.Pango.Utils
    build-depends:
      gtk ==0.12.*,
      glib ==0.12.*,
      pango ==0.12.*
    cpp-options: -DFRONTEND_PANGO

  if flag(vte)
    exposed-modules:
      Yi.UI.Vte
    build-depends:
      gtk ==0.12.*,
      glib ==0.12.*,
      pango ==0.12.*,
      vte ==0.12.*,
      executable-path
    cpp-options: -DFRONTEND_VTE

  if flag(vty)
    exposed-modules:
      Yi.UI.Vty
    build-depends:
      unix-compat >=0.1 && <0.3,
      vty >=4.0.0 && <5
    cpp-options: -DFRONTEND_VTY

  if flag (scion)
    cpp-options: -DSCION
    exposed-modules: Yi.Scion
    build-depends: scion == 0.1.*,
      ghc >= 7,
      ghc-syb-utils

  if flag (ghcAPI)
    cpp-options: -DGHC_API

    exposed-modules: Yi.Mode.Shim
    other-modules:
      Shim.SHM, Shim.SessionMonad, Shim.Hsinfo, Shim.GhcCompat,
      Shim.ExprSearch, Yi.GHC

  other-modules:
    Paths_yi,

    -- "Internal" modules that the user better not see.
    Yi.Buffer.Implementation

    -- Should probably be split out to another package.
    Data.DelayList
    Data.Trie
    Shim.CabalInfo
    Shim.Utils
    Shim.ProjectContent
    System.CanonicalizePath
    System.FriendlyPath

    -- Broken.
--            Yi.Keymap.Ee,
--            Yi.Keymap.Gwern,
--            Yi.Keymap.Joe,
--            Yi.Keymap.Mg,
--            Yi.Keymap.Nano,
--            Yi.Keymap.Vi,

executable parserTest
  -- Don't build this for now, has compilation trouble.
  buildable: False

  hs-source-dirs: src/parsertest
  default-language: Haskell2010

  if !flag(hacking) || flag(dochack)
    buildable: False

  main-is: ParserTest/ParserTest.hs

  build-depends:
    base >=4 && <5,
    array,
    containers,
    directory,
    filepath>=1.1 && <1.3
  if !flag(dochack)
    build-depends: yi

executable yi
  hs-source-dirs: src/executable
  default-language: Haskell2010

  if flag(dochack)
    buildable: False

  if flag(hacking)
    main-is: HackerMain.hs
  else
    main-is: Main.hs

  build-depends:
    base >=4 && <5
  if !flag(dochack)
    build-depends: yi
  build-tools: alex
  ghc-options: -threaded
